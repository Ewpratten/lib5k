// This file contains the maven configurations used by everything

apply plugin: "edu.wpi.first.GradleRIO"

repositories {
    // Main repos
    jcenter()
    mavenCentral()
    mavenLocal()

    // FRC repos
    maven { setUrl("https://jitpack.io")}
    maven { setUrl("https://repo1.maven.org/maven2/")}
    maven { setUrl("http://devsite.ctr-electronics.com/maven/release/")}
    maven { setUrl("http://www.revrobotics.com/content/sw/color-sensor-v3/sdk/maven/")}
    maven { setUrl("https://www.revrobotics.com/content/sw/max/sdk/maven/")}

    // Switching these will switch between release and development versions of WPILib.
    // It is generally recommended to stay on release, but I use development to test new features
    // MAKE SURE TO look at the comment below for further instructions
    // maven { setUrl("https://frcmaven.wpi.edu/artifactory/release/")}
    maven { setUrl("https://frcmaven.wpi.edu/artifactory/development/")}
}

// !!IMPORTANT!!
// Uncomment the following line only when using the development version of WPILib
// Do not set it to false to disable it
def useDevelopmentProperty = true

dependencies{
  // implementation wpi.deps.wpilib()
  // nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
  // nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)

  wpi.deps.wpilib().each{
    implementation it.replaceAll(wpi.wpilibVersion, project.WPI_VERSION)
  }

  wpi.deps.wpilibJni(wpi.platforms.roborio).each{
    nativeZip it.replaceAll(wpi.wpilibVersion, project.WPI_VERSION)
  }

  wpi.deps.wpilibJni(wpi.platforms.desktop).each{
    nativeDesktopZip it.replaceAll(wpi.wpilibVersion, project.WPI_VERSION)
  }

  implementation wpi.deps.vendor.java()
  nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
  nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
}

// dependencies {

//     // WPILib
//     implementation("edu.wpi.first.wpilibj:wpilibj-java:${project.WPI_VERSION}")
//     implementation("edu.wpi.first.hal:hal-java:${project.WPI_VERSION}")
//     implementation("edu.wpi.first.wpiutil:wpiutil-java:${project.WPI_VERSION}")

//     // WPILib Extras
//     implementation("edu.wpi.first.ntcore:ntcore-java:${project.WPI_VERSION}")
//     implementation("edu.wpi.first.cscore:cscore-java:${project.WPI_VERSION}")
//     implementation("edu.wpi.first.cameraserver:cameraserver-java:${project.WPI_VERSION}")

//     // WPILib command framework
//     implementation("edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java:${project.WPI_VERSION}")

//     // NavX
//     implementation("com.kauailabs.navx.frc:navx-java:${project.NAVX_VERSION}")

//     // CTRE
//     implementation("com.ctre.phoenix:api-java:${project.CTRE_VERSION}")
//     implementation("com.ctre.phoenix:wpiapi-java:${project.CTRE_VERSION}")

//     // REV Robotics
//     implementation("com.revrobotics.frc:ColorSensorV3-java:${project.REV_COLOR_VERSION}")
//     implementation("com.revrobotics.frc:SparkMax-java:${project.REV_SPARK_VERSION}")

//     // Math utils
//     implementation 'com.github.ewpratten:ewmath:master-SNAPSHOT'

//     // LibVEC (simple vectors)
//     implementation 'com.github.ewpratten:libvec:master-SNAPSHOT'
// }