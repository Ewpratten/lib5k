// This is the main build script. This mostly contains the gradle tasks for building the library JAR files and documentation

// This injects the gradlerio version info into all projects
buildscript {
    repositories { 
      jcenter() 
      maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
      // Update this version number to update GradleRIO
      classpath "edu.wpi.first:GradleRIO:2020.+"
    }
}

// All plugins used by the buildscript
plugins {
  id "com.gradle.build-scan" version "3.3.4"
  id "java-library"
}

// Load project dependancy configurations
apply from: "gradle_utils/libversions.gradle"
apply from: "gradle_utils/mavenrepos.gradle"

// LIB VERSION
project.version = "1.2.1"

// Enable Java support for all projects
allprojects{
  apply plugin: "java"
} 

// This enables some fancy gradle enterprise features for us
gradleEnterprise {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

// This will automatically pull in everything that isnt the "examples" project
dependencies{
  println "Fetching dependancies for bundle"
  rootProject.subprojects.each{
    if ( it.name != "examples"){
      api it
    }
  }
}

// This gets run by our CI pipeline to generate https://frc5024.github.io/lib5k
task document(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {

  // Set the jars to be generated into the build directory
	destinationDir = file("$buildDir/docs/javadoc")

  // Set the JavaDoc webpage title
	title = "$project.name $version API"

  // Set the custom CSS file containing our logo and theme
  options.setStylesheetFile(file("javadoc.css"))

  // These fix a JavaDoc bug
  options.addBooleanOption('-no-module-directories', true)
	options.author true

  // If you add a new dependancy to the project, add its javadoc URL to this list
	options.links 'http://docs.spring.io/spring/docs/4.3.x/javadoc-api/', 'http://docs.oracle.com/javase/8/docs/api/', 'http://docs.spring.io/spring-ws/docs/2.3.0.RELEASE/api/', 'http://docs.spring.io/spring-security/site/docs/4.0.4.RELEASE/apidocs/', 'https://first.wpi.edu/FRC/roborio/release/docs/java/', 'https://www.revrobotics.com/content/sw/max/sw-docs/java/', 'https://www.kauailabs.com/public_files/navx-mxp/apidocs/java/', 'https://knowm.org/javadocs/xchart/'
	
  // Any JavaDoc options should go here
  options.addStringOption 'Xdoclint:none', '-quiet'

  // Load the configuraation from every subproject
	subprojects.each { proj ->

    // Don't document the "examples" project
    if (proj.name != "examples"){

      // Read form every JavaDoc task in the subproject
      proj.tasks.withType(Javadoc).each { javadocTask ->
      
        // Add the task sources to the main JavaDoc
        source += javadocTask.source
        classpath += javadocTask.classpath
        excludes += javadocTask.excludes
        includes += javadocTask.includes

		  }

    }

	}

  doLast {
    // Clear out the docs folder, and move the JavaDoc into it
    delete "docs"
    file("$rootProject.buildDir/docs/javadoc").renameTo(file("docs"))
  }
}

// This is just a compatibility thing
subprojects.each { subproject ->
  evaluationDependsOn(subproject.path)
}



// task packModules(type: Zip){
//   archiveFileName = "modules.zip"
//   destinationDirectory = file("_release")
//   from "_release/modules"
// }

// task buildRelease(type: Jar){
//   delete file("_release")
//   delete file("$rootProject.buildDir/libs")
//   dependsOn subprojects.fatJar
//   dependsOn subprojects.jar
//   dependsOn project(":bundle").buildBundle
//   dependsOn copyPy
//   dependsOn packModules
// }

// artifacts{
//   archives project(":bundle").buildBundle
// }

/* Build all the required JARs */

// This will take every JavaDoc and pack it into a single JAR
task _buildJavaDocJar(type: Jar, dependsOn: document){
  classifier = "javadoc"
  from file("docs")
}

// This will create a Jar file containing all the source code. This isn't used on-robot, but is just used by IDEs to generate the 'F12' info
task _buildAllSourcesJar(type: Jar){
  classifier = "sources"

  // Iterate through each project, and add it's source code
  from allprojects.collect { it.sourceSets.main.allSource }
}

// This task bundles together all the .class files into a single JAR
task _buildAllClassesJar(type: Jar){
  classifier = "classes"

  // Needs to build the project
  dependsOn build

  // Disable support for 64-bit JARs (The RoboRIO is a 32-bit system)
  zip64 = false

  // Load all class files
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }

}

// This will bundle EVERYTHING into one Jar
task _buildAllJar(type: Jar){
  classifier = "all"

  // Needs to build the project
  dependsOn build

  // Load all files for the bug JAR
  from file("docs"), allprojects.collect { it.sourceSets.main.allSource }, { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

// This task is used to copy all python scripts from scripts/ to _release/python/
task _copyPy(type: Copy){
  from "scripts"
  into "_release/python"
  include "*.py"
}

// This task is used to copy all jar files from build/libs/ to _release/jar/
task _copyJar(type: Copy){

  // Copy dependancies
  dependsOn _buildJavaDocJar
  dependsOn _buildAllSourcesJar
  dependsOn _buildAllClassesJar
  dependsOn _buildAllJar

  // Where and how to copy
  from "build/libs"
  into "_release/jar"
  include project.name + "-" + project.version +"-*.jar"
}

// This task is used to clean out the _release directory
task _cleanRelease(type: Delete){
  delete "_release"
}
tasks.clean.dependsOn(tasks._cleanRelease)

task buildRelease {
  dependsOn _copyPy
  dependsOn _copyJar
}

